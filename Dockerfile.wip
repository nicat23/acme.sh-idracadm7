FROM alpine:3.22

RUN apk --no-cache add -f \
  openssl \
  openssh-client \
  coreutils \
  bind-tools \
  curl \
  sed \
  socat \
  tzdata \
  oath-toolkit-oathtool \
  tar \
  libidn \
  jq \
  cronie \
  rpm \
  gcompat \
  libc6-compat \
  libstdc++

ENV LE_CONFIG_HOME=/config
ENV LE_WORKING_DIR=/acme
ARG AUTO_UPGRADE=1

ENV AUTO_UPGRADE=$AUTO_UPGRADE

# Create the actual directories that will be mounted

# Install Dell iDRAC software using rpm
RUN rpm -ivh --nodeps --force \
  https://linux.dell.com/repo/hardware/DSU_24.11.11/os_dependent/RHEL9_64/srvadmin/srvadmin-argtable2-11.0.0.0-5268.el9.x86_64.rpm \
  https://linux.dell.com/repo/hardware/DSU_24.11.11/os_dependent/RHEL9_64/srvadmin/srvadmin-hapi-11.0.0.0-5268.el9.x86_64.rpm \
  https://linux.dell.com/repo/hardware/DSU_24.11.11/os_dependent/RHEL9_64/srvadmin/srvadmin-idracadm7-11.0.0.0-5268.el9.x86_64.rpm 

RUN [ ! -e /usr/lib/libssl.so ] && { [ -e /usr/lib/libssl.so.3 ] && ln -s /usr/lib/libssl.so.3 /usr/lib/libssl.so || \ 
  { [ -e /usr/lib64/libssl.so.3 ] && ln -s /usr/lib64/libssl.so.3 /usr/lib/libssl.so; }; }
RUN ln -s /opt/dell/srvadmin/bin/idracadm7 /usr/bin/racadm

# Install acme.sh to the defaults directory
COPY ./acme.sh /install_acme.sh/acme.sh
RUN cd /install_acme.sh && ([ -f /install_acme.sh/acme.sh ] && /install_acme.sh/acme.sh --install --home /defaults/acme \
  --config-home /defaults/config --cert-home /defaults/certs || curl https://get.acme.sh | sh -s -- --install \
  --home /defaults/acme --config-home /defaults/config --cert-home /defaults/certs) && rm -rf /install_acme.sh/
RUN ln -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh && crontab -l | grep acme.sh | \
  sed 's#> /dev/null#> /proc/1/fd/1 2>/proc/1/fd/2#' | crontab -
# Copy custom scripts into the defaults directory
COPY ./deploy /defaults/acme/deploy
COPY ./dnsapi /defaults/acme/dnsapi
COPY ./notify /defaults/acme/notify

# Fix the account.conf file to point to correct mount paths instead of defaults paths
RUN if [ -f /defaults/config/account.conf ]; then \
    sed -i 's|CERT_HOME=.*/defaults/certs.*|CERT_HOME="/certs"|g' /defaults/config/account.conf && \
    sed -i 's|LE_CONFIG_HOME=.*/defaults/config.*|LE_CONFIG_HOME="/config"|g' /defaults/config/account.conf && \
    sed -i 's|LE_WORKING_DIR=.*/defaults/acme.*|LE_WORKING_DIR="/acme"|g' /defaults/config/account.conf; \
  fi

# Create account.conf with correct paths if it doesn't exist
RUN if [ ! -f /defaults/config/account.conf ]; then \
    echo 'CERT_HOME="/certs"' > /defaults/config/account.conf && \
    echo 'LE_CONFIG_HOME="/config"' >> /defaults/config/account.conf && \
    echo 'LE_WORKING_DIR="/acme"' >> /defaults/config/account.conf; \
  fi

# Create a README for the certs directory
RUN echo "# Certificate Output Directory\n\nThis directory will contain your SSL certificates generated by acme.sh.\nCertificates are organized by domain name in subdirectories." > /defaults/certs/README.md

RUN apk del jq 

RUN for verb in help \
  version \
  install \
  uninstall \
  upgrade \
  issue \
  signcsr \
  deploy \
  install-cert \
  renew \
  renew-all \
  revoke \
  remove \
  list \
  info \
  showcsr \
  install-cronjob \
  uninstall-cronjob \
  cron \
  toPkcs \
  toPkcs8 \
  update-account \
  register-account \
  create-account-key \
  create-domain-key \
  createCSR \
  deactivate \
  deactivate-account \
  set-notify \
  set-default-ca \
  set-default-chain \
  ; do \
    printf -- "%b" "#!/usr/bin/env sh\nif [ -f /acme/acme.sh ]; then\n  /acme/acme.sh --${verb} \
      --config-home /config  \"\$@\"\nelse\n  echo 'Error: acme.sh not found. Please ensure the container is properly initialized.'\n  exit 1\nfi" >/usr/local/bin/--${verb} \
      && chmod +x /usr/local/bin/--${verb} \
  ; done

# Copy the initialization script
COPY ./initialize.sh /usr/local/bin/initialize.sh
RUN chmod +x /usr/local/bin/initialize.sh

# Create a simple entry script that calls the initialization
RUN printf "%b" '#!'"/usr/bin/env sh\n \
/usr/local/bin/initialize.sh\n \
if [ \"\$1\" = \"daemon\" ]; then\n \
  exec crond -n -s -m off 2>&1\n \
else\n \
  exec -- \"\$@\" 2>&1\n \
fi\n" >/entry.sh && chmod +x /entry.sh

ENTRYPOINT ["/entry.sh"]

# Declare volumes for main directories and optional subdirectories
VOLUME [ "/certs", "/config", "/acme/deploy", "/acme/dnsapi", "/acme/notify" ]

CMD ["--help"]